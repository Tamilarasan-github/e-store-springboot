extend type Query{
	getProductStocksByProductUuidForCurrentTimeForLoggedInSeller(productUuid : String!) : ProductStocksResponse
	getProductStocksByProductUuidForCurrentTime(productUuid : String!) : ProductStocksResponse
	getProductStocksListByProductUuidForLoggedInSeller(productUuid : String!, first : Int!, after : String, before : String) : ProductStocksConnection
	getProductStocksListByProductUuid(productUuid : String!, first : Int!, after : String, before : String) : ProductStocksConnection
}

extend type Mutation{
	addNewProductStocksForLoggedInSeller(productStocksInput : ProductStocksInput) : ProductStocksResponse!
	addNewProductStocksOnBehalfOfSeller(productStocksInput : ProductStocksInput) : ProductStocksResponse!
	updateExistingProductStocksForLoggedInSeller(productStocksInput : ProductStocksInput) : ProductStocksResponse!
	updateExistingProductStocksOnBehalfOfSeller(productStocksInput : ProductStocksInput) : ProductStocksResponse!
}


# Define the GraphQL type for ProductStocks
type ProductStocks {
  stockId: ID
  uuid: String
  product: Product
  totalStocks: Int
  availableStocks: Int
  reservedStocks: Int
  stocksEffectiveDate: String
  stocksTermDate: String
  minimumPerOrder: Int
  maximumPerOrder: Int
  createdDate: String
  updatedDate: String
  createdBy: String
  updatedBy: String
  deleteFlag: Boolean
  comments: String
}

# Define the GraphQL input type for creating or updating ProductStocks
input ProductStocksInput {
  stockId: ID
  uuid: String
  product: ProductInput
  totalStocks: Int
  availableStocks: Int
  reservedStocks: Int
  stocksEffectiveDate: String
  stocksTermDate: String
  minimumPerOrder: Int
  maximumPerOrder: Int
  createdDate: String
  updatedDate: String
  createdBy: String
  updatedBy: String
  deleteFlag: Boolean
  comments: String
}

type ProductStocksResponse {
	productStocks : ProductStocks
	productStocksList : [ProductStocks]
	errorMessage : String
 	successMessage : String
}

type ProductStocksConnection {
    edges: [ProductStocksEdge]
    pageInfo: PageInfo!
}

type ProductStocksEdge {
    node: ProductStocks
    cursor: String!
}