extend type Query{
	getPriceByProductUuidForCurrentTimeForLoggedInSeller(productUuid : String!) : PriceResponse
	getPricesListByProductUuidForLoggedInSeller(productUuid : String!, first : Int!, after : String, before : String) : PriceConnection
	getPricesListByProductUuid(productUuid : String!, first : Int!, after : String, before : String) : PriceConnection
}

extend type Mutation{
	addNewPriceForLoggedInSeller(priceInput : PriceInput) : PriceResponse!
	addNewPriceOnBehalfOfSeller(priceInput : PriceInput) : PriceResponse!
	updateExistingPriceForLoggedInSeller(priceInput : PriceInput) : PriceResponse!
	updateExistingPriceOnBehalfOfSeller(priceInput : PriceInput) : PriceResponse!
}

type Price
{
priceId :  Int!
uuid : String
product :  Product!
totalPricePerUnit :  Float!
taxIncluded :  Boolean!
taxType :  String!
taxPercentage :  Float
currency :  String!
priceEffectiveDate :  String!
priceTermDate :  String
createdDate :  String!
updatedDate :  String
createdBy :  String!
updatedBy :  String
deleteFlag :  Boolean!
comments :  String
}

input PriceInput
{
uuid : String
product :  ProductInput
totalPricePerUnit :  Float
taxIncluded :  Boolean
taxType :  String
taxPercentage :  Float
currency :  String!
priceEffectiveDate :  String
priceTermDate :  String
createdDate :  String
updatedDate :  String
createdBy :  String
updatedBy :  String
deleteFlag :  Boolean
comments :  String
}

type PriceResponse
{
 prices : [Price]
 errorMessage : String
 successMessage : String
}

type PriceConnection {
    edges: [PriceEdge]
    pageInfo: PageInfo!
}

type PriceEdge {
    node: Price
    cursor: String!
}

