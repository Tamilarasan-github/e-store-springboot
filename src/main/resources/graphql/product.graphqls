type Query{
	getAllProducts(productName : String, first: Int, after: String) : ProductConnection
	getAllActiveProducts(productName : String, first: Int, after: String) : ProductConnection
}

type Mutation
{
	addNewProduct(productInput: ProductInput!) : Product!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge!]
}

type ProductEdge {
  cursor: String
  node: Product
}

type Product
{
productId :  Int!
uuid: String
seller :  Seller
productCode :  String!
productName :  String!
productTitle :  String!
productCondition :  String!
description :  String!
productStatus :  String!
productSubCategoryId : Int!
brandName :  String!
imageUrl :  String!
createdDate :  String
updatedDate :  String
createdBy :  String!
updatedBy :  String
deleteFlag :  Boolean!
comments :  String
}

input ProductInput
{
productId :  Int
uuid: String
seller :  SellerInput
productCode :  String
productName :  String
productTitle :  String
productCondition :  String
description :  String
productStatus :  String
productSubCategoryId : Int
brandName :  String
imageUrl :  String
createdDate :  String
updatedDate :  String
createdBy :  String
updatedBy :  String
deleteFlag :  Boolean
comments :  String
}




